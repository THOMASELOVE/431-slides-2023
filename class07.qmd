---
title: "431 Class 07"
author: Thomas E. Love, Ph.D.
date: "2023-09-19"
format:
  revealjs: 
    theme: default
    self-contained: true
    slide-number: true
    footnotes-hover: true
    preview-links: auto
    date-format: iso
    logo: 431-2023-pic.png
    footer: "431 Class 07 | 2023-09-19 | <https://thomaselove.github.io/431-2023/>"
---

## Our Agenda

- Setting up the `dm1000` data
- Identifying missing data and working around it
- Assessing Normality
    - with histogram / boxplot / Normal Q-Q plot (good)
    - with numerical summaries, and with hypothesis tests (less good)
- Summarizing Categorical Data

## Our R Packages

```{r}
#| message: false
#| echo: true

library(broom)
library(Epi) ## for twoby2() function
library(gt) ## for making tables
library(gtExtras) ## for fancier tables
library(kableExtra) ## for kbl() function
library(janitor)
library(naniar) 
library(patchwork)
library(tidyverse) # always load tidyverse last

theme_set(theme_test()) # trying a new theme
knitr::opts_chunk$set(comment = NA)
```

- I used `#| message: false` in the code chunk to silence messages about conflicts between R packages. 

# A New Data Set (`dm_1000.csv`)

## Use Raw URL from 431-data page

```{r}
#| echo: true

url_temp <- "https://raw.githubusercontent.com/THOMASELOVE/431-data/main/data-and-code/dm_1000.csv"

dm1000 <- read_csv(url_temp, show_col_types = FALSE) |>
  clean_names() |>
  mutate(across(where(is.character), as_factor)) |>
  mutate(subject = as.character(subject))
```

1000 simulated adults (ages 31-75) living with diabetes, in Cuyahoga County, in one of four race/ethnicity categories and in one of four insurance categories.

- One new variable as compared to `dm431`: `residence` (Cleveland or Suburbs)

## `dm1000` Code Book (1 of 3)

Variable | Description
-------: | :--------------------------------------------
`subject` | subject code (M-0001 through M-1000)
`age` | subject's age, in years
`insurance` | primary insurance, 4 levels
`n_income` | neighborhood median income, in $
`ht` | height, in meters (2 decimal places)
`wt` | weight, in kilograms (2 decimal places)

## `dm1000` Code Book (2 of 3)

Variable | Description
-------: | :--------------------------------------------
`sbp` | most recent systolic blood pressure (mm Hg)
`dbp` | most recent diastolic blood pressure (mm Hg)
`a1c` | most recent Hemoglobin A1c (%)
`ldl` | most recent LDL cholesterol level (mg/dl)
`tobacco` | most recent tobacco status, 3 levels
`statin` | 1 = prescribed a statin in past 12m, 0 = not

## `dm1000` codebook (3 of 3)

Variable | Description
-------: | :--------------------------------------------
`eye_exam` | 1 = diabetic eye exam in past 12m, <br /> 0 = no record of exam in past 12m
`race_ethnicity` | race/ethnicity category, 3 levels
`sex` | Female or Male
`county` | all subjects live in Cuyahoga County
`residence` | Cleveland or Suburbs

# Dealing with Missing Data

## Any Missing Data?

```{r}
#| echo: true

gg_miss_var(dm1000)
```

## Counts of missingness, by variable

```{r}
#| echo: true

miss_var_summary(dm1000)
```

## Other useful functions

```{r}
#| echo: true
miss_var_table(dm1000)
```

```{r}
#| echo: true
miss_case_table(dm1000)
```

## How should we summarize data with missing values?

It depends on what you'll do with the data.

- If you are providing a data summary, then you should summarize the complete cases, and specify the number of missing values.
- If you are intending to use the sample you've collected to make an inference about a process or population or to build a model, then you may want to consider whether or not a complete-case analysis will introduce bias.


## What do graphs do with missing data?

```{r}
#| echo: true
#| fig-height: 4
#| warning: true

ggplot(data = dm1000, aes(x = ldl)) +
  geom_histogram(bins = 20, fill = "slateblue", col = "cyan")
```

## Exploring `ldl` in `dm1000` 

```{r}
#| echo: true
#| output-location: slide
#| message: true
#| warning: false

p1 <- ggplot(dm1000, aes(sample = ldl)) +
  geom_qq(col = "slateblue") + 
  geom_qq_line(col = "magenta") + 
  theme(aspect.ratio = 1) + 
  labs(title = "Normal Q-Q plot: dm1000 LDL",
       y = "Actual LDL Cholesterol (mm Hg)",
       x = "Theoretical values from N(0,1)")

p2 <- ggplot(dm1000, aes(x = ldl)) +
  geom_histogram(aes(y = stat(density)), 
                 bins = 20, fill = "slateblue", col = "cyan") +
  stat_function(fun = dnorm, 
                args = list(mean = mean(dm1000$ldl, na.rm = TRUE), 
                            sd = sd(dm1000$ldl, na.rm = TRUE)),
                col = "magenta", lwd = 1.5) +
  labs(title = "Density Function: dm1000 LDL")

p3 <- ggplot(dm1000, aes(x = ldl, y = "")) +
  geom_boxplot(fill = "slateblue", outlier.color = "slateblue", notch = TRUE) + 
  labs(title = "Boxplot: dm1000 LDL", y = "")

p1 + (p2 / p3 + plot_layout(heights = c(4,1)))
```

## Silenced Warnings for previous plot

```
Warning: Removed 178 rows containing non-finite values (stat_qq).
Warning: Removed 178 rows containing non-finite values (stat_qq_line).
Warning: Removed 178 rows containing non-finite values (stat_bin).
Warning: Removed 178 rows containing non-finite values (stat_boxplot).
```

So, all of those plots only show 822 observations, not 1000.

## Summaries with Missing Data

```{r}
#| echo: true
#| message: true

dm1000 |> select(ldl) |> summary()

mosaic::favstats(~ ldl, data = dm1000)
```

- Silence the message about what happens when you load `mosaic` with `#| message: false`.


## Comparing LDL by Insurance, Try 1

```{r}
#| echo: true
#| warning: true

ggplot(data = dm1000, aes(x = ldl, y = insurance)) +
  geom_violin() +
  geom_boxplot(width = 0.3) +
  labs(title = "LDL Cholesterol by Insurance Type",
       caption = "dm1000 tibble")
```

## Comparing LDL by Insurance, Try 2

```{r}
#| echo: true

dm_ldlcc <- dm1000 |> filter(complete.cases(ldl, insurance))

ggplot(data = dm_ldlcc, aes(x = ldl, y = insurance)) +
  geom_violin(aes(fill = insurance)) +
  geom_boxplot(width = 0.3) +
  scale_fill_viridis_d() +
  labs(title = "LDL Cholesterol by Insurance Type",
       caption = "dm1000 tibble with complete LDL and insurance data")
```

## Comparing LDL by Insurance, Try 3

```{r}
#| echo: true
#| output-location: slide

dm_ldlcc <- dm1000 |> filter(complete.cases(ldl, insurance))

ggplot(data = dm_ldlcc, aes(x = ldl, y = insurance)) +
  geom_violin(aes(fill = insurance)) +
  geom_boxplot(width = 0.3, notch = TRUE, 
               outlier.size = 3, outlier.color = "red") +
  scale_fill_viridis_d(begin = 0.3) +
  guides(fill = "none", col = "none") +
  labs(title = "LDL Cholesterol by Insurance Type",
       caption = "dm1000 tibble with complete LDL and insurance data",
       y = "", x = "LDL Cholesterol (mg/dl)")
```

## LDL by Insurance comparison

```{r}
#| echo: true

mosaic::favstats(ldl ~ insurance, data = dm1000)
```

# Assessing Normality in a batch of data

## Does a Normal Model fit well?

If a Normal model fits our data well, then we should see the following graphical indications:

1. A histogram that is symmetric and bell-shaped.
2. A boxplot where the box is symmetric around the median, as are the whiskers, without serious outliers.
3. A normal Q-Q plot that essentially falls on a straight line.

## Diastolic BP in `dm1000`

```{r}
#| echo: true
#| output-location: slide
p1 <- ggplot(dm1000, aes(sample = dbp)) +
  geom_qq(col = "purple") + geom_qq_line(col = "red") + 
  theme(aspect.ratio = 1) + 
  labs(title = "Normal Q-Q plot: dm1000 DBP",
       y = "Observed Diastolic BP (mm Hg)",
       x = "Theoretical from N(0,1)")

p2 <- ggplot(dm1000, aes(x = dbp)) +
  geom_histogram(aes(y = stat(density)), 
                 bins = 20, fill = "purple", col = "gold") +
  stat_function(fun = dnorm, 
                args = list(mean = mean(dm1000$dbp, na.rm = TRUE), 
                            sd = sd(dm1000$dbp, na.rm = TRUE)),
                col = "red", lwd = 1.5) +
  labs(title = "Density Function: dm1000 DBP")

p3 <- ggplot(dm1000, aes(x = dbp, y = "")) +
  geom_boxplot(fill = "purple", outlier.color = "purple", notch = TRUE) + 
  labs(title = "Boxplot: dm1000 DBP", y = "")

p1 + (p2 / p3 + plot_layout(heights = c(4,1))) +
  plot_annotation("Observed DBPs in dm1000 tibble")
```

## Stem-and-Leaf of `dbp` values?

1. Do we see any implausible diastolic blood pressures here?

```{r}
#| echo: true
stem(dm1000$dbp, scale = 0.6, width = 75)
```

::: aside
I've specified `scale` and `width` just for this slide.
:::

## Extreme `dbp` values?

Which are the subjects with unusual values of `dbp`?

```{r}
#| echo: true
dm1000 |>
  filter(dbp < 50 | dbp > 110) |> 
  select(subject, sbp, dbp)
```

## Numerical Summaries for `dbp`?

Which summaries seem most useful for the `dm1000` `dbp` data?

```{r}
#| echo: true
mosaic::favstats(~ dbp, data = dm1000)

Hmisc::describe(dm1000$dbp)
```

- Should we use median (25th percentile, 75th percentile) or should we use mean and standard deviation to summarize these data?

## LDL in `dm1000` approximately Normal?

```{r}
p1 <- ggplot(dm1000, aes(sample = ldl)) +
  geom_qq(col = "tomato") + geom_qq_line(col = "black") + 
  theme(aspect.ratio = 1) + 
  labs(title = "Normal Q-Q plot: dm1000 ldl",
       y = "LDL (mg/dl)", x = "")

p2 <- ggplot(dm1000, aes(x = ldl)) +
  geom_histogram(aes(y = stat(density)), 
                 bins = 20, fill = "tomato", col = "gold") +
  stat_function(fun = dnorm, 
                args = list(mean = mean(dm1000$ldl, na.rm = TRUE), 
                            sd = sd(dm1000$ldl, na.rm = TRUE)),
                col = "blue", lwd = 1.5) +
  labs(title = "Density Function: dm1000 ldl")

p3 <- ggplot(dm1000, aes(x = ldl, y = "")) +
  geom_boxplot(fill = "tomato", outlier.color = "tomato") + 
  labs(title = "Boxplot: dm1000 ldl", y = "")

p1 + (p2 / p3 + plot_layout(heights = c(4,1))) +
  plot_annotation("Observed LDL in dm1000 tibble")
```

## How should we think about summarizing LDL?

```{r}
#| echo: true

mosaic::favstats(~ ldl, data = dm1000)
```

- The skew makes this a bit more challenging, as the mean and median are more substantially different from each other.
- A transformation (perhaps with a natural logarithm, since all of these values are positive) might be helpful...

## Comparing LDL to log(LDL)

```{r}
#| echo: true
#| output-location: slide

p1 <- ggplot(dm1000, aes(x = ldl)) +
  geom_histogram(aes(y = stat(density)), 
                 bins = 20, fill = "tomato", col = "gold") +
  stat_function(fun = dnorm, 
                args = list(mean = mean(dm1000$ldl, na.rm = TRUE), 
                            sd = sd(dm1000$ldl, na.rm = TRUE)),
                col = "blue", lwd = 1.5) +
  labs(title = "Histogram: dm1000 LDL")

dm1000 <- dm1000 |> mutate(logldl = log(ldl))

p2 <- ggplot(dm1000, aes(x = logldl)) +
  geom_histogram(aes(y = stat(density)), 
                 bins = 20, fill = "deeppink", col = "gold") +
  stat_function(fun = dnorm, 
                args = list(mean = mean(dm1000$logldl, na.rm = TRUE), 
                            sd = sd(dm1000$logldl, na.rm = TRUE)),
                col = "blue", lwd = 1.5) +
  labs(title = "Histogram: Natural Log of dm1000 LDL")

p1 / p2
```


## Normal Q-Q of LDL and then log(LDL)

```{r}
#| echo: true
#| output-location: slide

p1 <- ggplot(dm1000, aes(sample = ldl)) +
  geom_qq(col = "tomato") + geom_qq_line(col = "black") + 
  theme(aspect.ratio = 1) + 
  labs(title = "Normal Q-Q plot: dm1000 ldl",
       y = "LDL (mg/dl)", x = "")

p2 <- ggplot(dm1000, aes(sample = log(ldl))) +
  geom_qq(col = "deeppink") + geom_qq_line(col = "black") + 
  theme(aspect.ratio = 1) + 
  labs(title = "Normal Q-Q plot: dm1000 log(ldl)",
       y = "Natural log of LDL (mg/dl)", x = "")

p1 + p2
```


## `dm1000`: Neighborhood Income

```{r}
p1 <- ggplot(dm1000, aes(sample = n_income)) +
  geom_qq(col = "seagreen") + geom_qq_line(col = "red") + 
  theme(aspect.ratio = 1) + 
  labs(title = "Normal Q-Q plot: dm1000 Income")

p2 <- ggplot(dm1000, aes(x = n_income)) +
  geom_histogram(aes(y = stat(density)), 
                 bins = 20, fill = "seagreen", col = "gold") +
  stat_function(fun = dnorm, 
                args = list(mean = mean(dm1000$n_income, na.rm = TRUE), 
                            sd = sd(dm1000$n_income, na.rm = TRUE)),
                col = "red", lwd = 1.5) +
  labs(title = "Density Function: dm1000 Income")

p3 <- ggplot(dm1000, aes(x = n_income, y = "")) +
  geom_boxplot(fill = "seagreen", outlier.color = "seagreen") + 
  labs(title = "Boxplot: dm1000 Income", y = "")

p1 + (p2 / p3 + plot_layout(heights = c(4,1))) +
  plot_annotation("Observed n_income in dm1000")
```

## `dm1000`: Natural Logarithm of Income

```{r}
dm1000 <- dm1000 |> mutate(log_inc = log(n_income))

p1 <- ggplot(dm1000, aes(sample = log_inc)) +
  geom_qq(col = "seagreen") + geom_qq_line(col = "red") + 
  theme(aspect.ratio = 1) + 
  labs(title = "Normal Q-Q plot: log(dm1000 Income)")

p2 <- ggplot(dm1000, aes(x = log_inc)) +
  geom_histogram(aes(y = stat(density)), 
                 bins = 20, fill = "seagreen", col = "ivory") +
  stat_function(fun = dnorm, 
                args = list(mean = mean(dm1000$log_inc, na.rm = TRUE), 
                            sd = sd(dm1000$log_inc, na.rm = TRUE)),
                col = "red", lwd = 1.5) +
  labs(title = "Density Function: log(dm1000 Income)")

p3 <- ggplot(dm1000, aes(x = log_inc, y = "")) +
  geom_boxplot(fill = "seagreen", outlier.color = "seagreen") + 
  labs(title = "Boxplot: log(dm1000 Income)", y = "")

p1 + (p2 / p3 + plot_layout(heights = c(4,1))) +
  plot_annotation("Observed log(n_income) in dm1000")
```

## `dm1000`: Base-10 Logarithm of Income

```{r}
dm1000 <- dm1000 |> mutate(log10_inc = log10(n_income))

p1 <- ggplot(dm1000, aes(sample = log10_inc)) +
  geom_qq(col = "seagreen") + geom_qq_line(col = "red") + 
  theme(aspect.ratio = 1) + 
  labs(title = "Normal Q-Q plot: log10(n_income)")

p2 <- ggplot(dm1000, aes(x = log10_inc)) +
  geom_histogram(aes(y = stat(density)), 
                 bins = 20, fill = "seagreen", col = "ivory") +
  stat_function(fun = dnorm, 
                args = list(mean = mean(dm1000$log10_inc, na.rm = TRUE), 
                            sd = sd(dm1000$log10_inc, na.rm = TRUE)),
                col = "red", lwd = 1.5) +
  labs(title = "Density Function: log10(n_income)")

p3 <- ggplot(dm1000, aes(x = log10_inc, y = "")) +
  geom_boxplot(fill = "seagreen", outlier.color = "seagreen") + 
  labs(title = "Boxplot: log10(n_income)", y = "")

p1 + (p2 / p3 + plot_layout(heights = c(4,1))) +
  plot_annotation("Observed log10(n_income) in dm1000")
```

## Histograms for `dm1000`

```{r}
temp_sbp <- dm1000 |> filter(complete.cases(sbp))

p1a <- ggplot(temp_sbp, aes(x = sbp)) +
  geom_histogram(aes(y = stat(density)), 
                 bins = 10, fill = "tomato", col = "black") +
  stat_function(fun = dnorm, 
                args = list(mean = mean(temp_sbp$sbp), 
                            sd = sd(temp_sbp$sbp)),
                col = "red", lwd = 1.5) +
  theme(aspect.ratio = 1) + 
  labs(title = "Systolic BP")

temp_dbp <- dm1000 |> filter(complete.cases(dbp))
  
p1b <- ggplot(temp_dbp, aes(x = dbp)) +
  geom_histogram(aes(y = stat(density)), 
                 bins = 10, fill = "seagreen", col = "black") +
  stat_function(fun = dnorm, 
                args = list(mean = mean(temp_dbp$dbp), 
                            sd = sd(temp_dbp$dbp)),
                col = "red", lwd = 1.5) +
  theme(aspect.ratio = 1) + 
  labs(title = "Diastolic BP")

# no missing ages in dm1000

p1c <- ggplot(dm1000, aes(x = age)) +
  geom_histogram(aes(y = stat(density)), 
                 bins = 10, fill = "royalblue", col = "black") +
  stat_function(fun = dnorm, 
                args = list(mean = mean(dm1000$age), 
                            sd = sd(dm1000$age)),
                col = "red", lwd = 1.5) +
  theme(aspect.ratio = 1) + 
  labs(title = "Age")

temp_ldl <- dm1000 |> filter(complete.cases(ldl))

p1d <- ggplot(temp_ldl, aes(x = ldl)) +
  geom_histogram(aes(y = stat(density)), 
                 bins = 10, fill = "chocolate", col = "black") +
  stat_function(fun = dnorm, 
                args = list(mean = mean(temp_ldl$ldl), 
                            sd = sd(temp_ldl$ldl)),
                col = "red", lwd = 1.5) +
  theme(aspect.ratio = 1) + 
  labs(title = "LDL Cholesterol")

temp_n_income <- dm1000 |> filter(complete.cases(n_income))

p1e <- ggplot(temp_n_income, aes(x = n_income)) +
  geom_histogram(aes(y = stat(density)), 
                 bins = 10, fill = "darkcyan", col = "black") +
  stat_function(fun = dnorm, 
                args = list(mean = mean(temp_n_income$n_income), 
                            sd = sd(temp_n_income$n_income)),
                col = "red", lwd = 1.5) +
  theme(aspect.ratio = 1) + 
  labs(title = "Neighborhood Income")

(p1a + p1b + p1c)/(p1d + p1e)
```

# Summarizing Distribution Shapes Numerically?

## Quantifying skew with $skew_1$

Assessing skewness with $skew_1$ (is the mean close to the median?)

$$
skew_1 = \frac{mean - median}{standard \ deviation}
$$

### Interpreting $skew_1$ (for unimodal data)

- $skew_1 = 0$ if the mean and median are the same
- $skew_1 > 0.2$ indicates fairly substantial right skew
- $skew_1 < -0.2$ indicates fairly substantial left skew

## $skew_1$ for some `dm1000` variables

Variable | $\bar{x}$ = mean | median | $s$ = SD | $skew_1$
:------: | ---: | ---: | ---: | ---:
`sbp` | 132.77 | 132 | 17.95 | 0.043
`dbp` | 74.46 | 75 | 12.42 | -0.043
`age` | 57.20 | 58 | 10.10 | -0.079
`ldl` | 100.72 | 95 | 37.05 | 0.154
`n_income` | 35178 | 30587 | 18776 | 0.244

- Don't draw conclusions without a plot!
- Does this tell us anything about outliers?

## Empirical Rule for a Normal Model

If the data follow a Normal distribution, then about:

- 68% of the data falls within 1 standard deviation of the mean
- 95% of the data falls within mean $\pm$ 2 standard deviations
- 99.7% of the data falls within mean $\pm$ 3 standard deviations

Remember half of the data will be in the IQR for any data set.

## SBPs within 1 SD of the mean?

```{r}
#| echo: true
dm1000 |>
  filter(complete.cases(sbp)) |>
  count(sbp > mean(sbp) - sd(sbp), 
        sbp < mean(sbp) + sd(sbp)) 
```

- Note that 701/(149+144+701) = 701/994 = 0.705, approximately.
- How does this compare to the expectation under a Normal model? 

## Coverage Probabilities in `dm1000`

Variable | $\bar{x}$ | $s$ = SD | *n* | $\bar{x} \pm s$ | $\bar{x} \pm 2s$ | $\bar{x} \pm 3s$ 
:----: | ----: | ----: | ----: | ----: | ----: | ---:
`sbp` | 132.8 | 18.0 | 994 | 70.5% | 95.0% | 99.2%
`dbp` | 74.5 | 12.4 | 994 | 67.5% | 95.3% | 99.7%
`age` | 57.2 | 10.1 | 1000 | 64.8% | 96.6% | 100%
`ldl` | 100.7 | 37.1 | 822 | 69.8% | 95.6% | 99.1%
`n_income` | 35,178 | 18,776 | 972 | 75.0% | 95.3% | 98.5%

- Conclusions about utility of the Normal model?
- Do these match the conclusions from the plots? --->

## Normal Q-Q plots for `dm1000`

```{r}
p1a <- ggplot(dm1000, aes(sample = sbp)) +
  geom_qq(col = "tomato") + geom_qq_line(col = "black") + 
  theme(aspect.ratio = 1) + 
  labs(title = "Systolic BP")

p1b <- ggplot(dm1000, aes(sample = dbp)) +
  geom_qq(col = "seagreen") + geom_qq_line(col = "black") + 
  theme(aspect.ratio = 1) + 
  labs(title = "Diastolic BP")

p1c <- ggplot(dm1000, aes(sample = age)) +
  geom_qq(col = "royalblue") + geom_qq_line(col = "red") + 
  theme(aspect.ratio = 1) + 
  labs(title = "Age")

p1d <- ggplot(dm1000, aes(sample = ldl)) +
  geom_qq(col = "chocolate") + geom_qq_line(col = "black") + 
  theme(aspect.ratio = 1) + 
  labs(title = "LDL Cholesterol")

p1e <- ggplot(dm1000, aes(sample = n_income)) +
  geom_qq(col = "darkcyan") + geom_qq_line(col = "red") + 
  theme(aspect.ratio = 1) + 
  labs(title = "Neighborhood Income")

(p1a + p1b + p1c)/(p1d + p1e)
```


## Hypothesis Testing for Normality?

Don't. Graphical approaches are **far** better than tests...

```{r}
#| echo: true
shapiro.test(dm1000$sbp)
```

- The very small p value indicates that the test finds some indications against adopting a Normal model for these data.

- Exciting, huh? Alas, not actually useful.

## Other Hypothesis Tests of Normality

The `nortest` package, which I don't even install as part of our 431 packages, includes many other possible tests of Normality for a batch of data, including:

- `nortest::ad.test()` Anderson-Darling test
- `nortest::lillie.test()` Lilliefors test
- `nortest::cvm.test()` Cramer-von Mises test
- `nortest::sf.test()` Shapiro-Francia test
- `nortest::pearson.test()` Pearson chi-square test

## Our `dm1000` data: Testing Normality

Variable | S-W | A-D | Lill | C-vM | S-Fr | Pear
-------: | ----: | ----: | ----: | ----: | ----: | ----:
`sbp` | 2e-09 | 3e-08 | 6e-10 | 2e-06 | 9e-09 | <2e-16 
`dbp` | 0.0001 | 0.030 | 0.033 | **0.078** | 0.0001 | 0.0002

- `n_income` has a tiny *p* value for all tests, but so what?
- So does `age` and so do `sbp` and `ldl`...

## Simulated Normally distributed data

```{r}
#| echo: true
set.seed(431)
sim150 <- rnorm(n = 150, mean = 100, sd = 10)
sim1000 <- rnorm(n = 1000, mean = 100, sd = 10)
```

Variable | $skew_1$ | $\bar{x} \pm s$ | $\bar{x} \pm 2s$ | $\bar{x} \pm 3s$ | Outliers?
-------: | ----: | ----: | ----: | ----: | ----:
`sim150` | 0.113 | 67.3% | 97.3% | 99.3% | 1/150
`sim1000` | 0.024 | 67.7% | 95.9% | 99.9% | 4/1000

```{r}
t150 <- tibble(sim150)
t1000 <- tibble(sim1000)

p1 <- ggplot(t150, aes(x = sim150, y = "")) +
  geom_violin() + geom_boxplot(fill = "coral", width = 0.3, notch = TRUE, outlier.size = 3, outlier.color = "red") +
  labs(title = "150 Simulated N(100,10)", y = "n = 150")

p2 <- ggplot(t1000, aes(x = sim1000, y = "")) +
  geom_violin() + geom_boxplot(fill = "coral", width = 0.3, notch = TRUE, outlier.size = 3, outlier.color = "red") +
  labs(title = "1000 Simulated N(100,10)", y = "n = 1000")

p1 / p2
```

## Normal Q-Q plots and Shapiro-Wilk?

```{r}
t150 <- tibble(sim150)
t1000 <- tibble(sim1000)

p1 <- ggplot(t150, aes(sample = sim150)) +
  geom_qq() + geom_qq_line(col = "red") +
  labs(title = "150 Simulated N(100,10)")

p2 <- ggplot(t1000, aes(sample = sim1000)) +
  geom_qq() + geom_qq_line(col = "red") +
  labs(title = "1000 Simulated N(100,10)")

p1 + p2
```

::: {.incremental}
- Shapiro-Wilk: `sim150` *p* = 0.682, while `sim1000` *p* = 0.038
:::



## Why not test for Normality? (1)

There are multiple hypothesis testing schemes and each looks for one specific violation of a Normality assumption. 

- None can capture the wide range of issues our brains can envision, and none by itself is great at its job.
- With any sort of reasonable sample size, the test is so poor at detecting non-normality compared to our eyes, that it finds problems we don't care about and ignores problems we do care about.

## Why not test for Normality? (2)

- And without a reasonable sample size, the test is essentially useless.

Whenever you *can* avoid hypothesis testing and instead actually plot the data, you should **plot the data**. 

Sometimes you can't plot (especially with really big data) but the test should be your very last resort.

## Does a Normal Model fit well?

Do we have...

1. A histogram that is symmetric and bell-shaped?
2. A boxplot where the box is symmetric around the median, as are the whiskers, without severe outliers?
3. A normal Q-Q plot that essentially falls on a straight line?
4. If in doubt, maybe compare mean to median re: skew, and consider Empirical Rule to help make tough calls?

Big issue: why do you need to assume a Normal model?

# Dealing with Categories

## Using `count` to create a tibble of counts

```{r}
#| echo: true

dm1000 |> count(tobacco)
```

## Tabulating a categorical variable

```{r}
#| echo: true

dm1000 |> tabyl(tobacco) |> 
  adorn_pct_formatting() |>
  adorn_totals() 
```

- Does this order make sense?

## Changing Order of `tobacco` levels

```{r}
#| echo: true

dm1000 <- dm1000 |> 
  mutate(tobacco = fct_relevel(tobacco, "Current", "Former"))

dm1000 |> tabyl(tobacco)

```

- Does this order make more sense?
- `fct_relevel()` is one of many useful tools in `forcats`.

## Using the `forcats` package

In addition to `fct_relevel()` and `fct_recode()`, ...

- `fct_reorder()`: reordering a factor by another variable
- `fct_infreq()`: reordering a factor by its frequency of values
- `fct_lump()`: collapsing least frequent values into "other"
- and several others

## `forcats` references 

1. I use the `forcats` tools frequently in our Course Notes
2. <https://forcats.tidyverse.org/> forcats web page, especially [the vignette](https://forcats.tidyverse.org/articles/forcats.html)
3. [Posit Cheat Sheet](https://posit.co/resources/cheatsheets/) on Factors with forcats.
4. [R for Data Science on Factors](https://r4ds.hadley.nz/factors.html)

## Using `gt` to make a table prettier

```{r}
#| echo: true

dm1000 |> 
  tabyl(tobacco) |> 
  adorn_pct_formatting() |> 
  adorn_totals() |> 
  gt() |> 
  tab_header(title = "Tobacco Status from dm1000")
```

- <https://gt.rstudio.com/> provides an amazing array of options.

## `gtExtras` lets us build 538-style tables

```{r}
#| echo: true

dm1000 |> 
  tabyl(tobacco) |> 
  adorn_pct_formatting() |> 
  adorn_totals() |> 
  gt() |> 
  gt_theme_538() |> 
  tab_header(title = "Table styled like 538")
```

## `gtExtras` lets us build NYT-style tables

```{r}
#| echo: true

dm1000 |> tabyl(tobacco) |> adorn_pct_formatting() |> adorn_totals() |> 
  gt() |> 
  gt_theme_nytimes() |> 
  tab_header(title = "Table styled like the New York Times")
```

- There's also a `gt_theme_espn()` and several others.

## Using `geom_bar` to show a distribution

```{r}
#| echo: true

ggplot(dm1000, aes(x = tobacco)) +
  geom_bar()
```

## Augmenting the `geom_bar` result 

```{r, echo = TRUE}
#| echo: true
#| output-location: slide

tempdat <- dm1000 |> filter(complete.cases(tobacco))

ggplot(data = tempdat, aes(x = tobacco, fill = tobacco)) +
  geom_bar() + 
  geom_text(aes(label = ..count..), stat = "count", 
            vjust = 1.5, col = "white", size = 8) +
  scale_fill_viridis_d(option = "C", end = 0.8) +
  guides(fill = "none")
```

## Using `count` to create a tibble of counts

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true

dm1000 |> 
  count(statin, tobacco)
```

:::

::: {.column width="50%"}
```{r}
#| echo: true
dm1000 |> 
  count(insurance, residence)
```
:::

::::

## Change the `insurance` ordering

```{r}
#| echo: true 

dm1000 <- dm1000 |>
  mutate(insurance = fct_relevel(insurance, 
                                 "Medicare", "Commercial", "Medicaid"))

dm1000 |> tabyl(residence, insurance)
```

## Cross-Tabulations

```{r}
#| echo: true

dm1000 |> 
  filter(complete.cases(insurance, residence)) |>
  tabyl(insurance, residence) |> 
  adorn_totals(where = c("row", "col")) |>
  gt()
```


## Were suburban residents more likely to have a statin prescription?

```{r}
#| echo: true

dm1000 |> 
  filter(complete.cases(statin, residence)) |>
  tabyl(residence, statin)
```

## Revise statin order, add percentages

```{r}
#| echo: true

dm1000 |> filter(complete.cases(statin, residence)) |>
  mutate(statin = fct_relevel(factor(statin), "1", "0")) |>
  tabyl(residence, statin)
```

```{r}
#| echo: true

dm1000 |> filter(complete.cases(statin, residence)) |>
  mutate(statin = fct_relevel(factor(statin), "1", "0")) |>
  tabyl(residence, statin) |> 
  adorn_percentages(denom = "row") |>
  adorn_pct_formatting()
```

## Create using `table` instead

```{r}
#| echo: true

tempdat1 <- dm1000 |> 
  filter(complete.cases(statin, residence)) |>
  mutate(statin = fct_relevel(factor(statin), "1", "0")) 

tab1 <- table(tempdat1$residence, tempdat1$statin)

tab1
```

## Assess 2x2 table

```{r}
#| echo: true

twoby2(tab1)  # twoby2() is part of the Epi package
```

## A three-by-four two-way table

```{r}
#| echo: true

dm1000 |> filter(complete.cases(tobacco, insurance)) |>
  tabyl(tobacco, insurance) |>
  adorn_totals(where = c("row", "col"))
```

- 3 rows, 4 columns: hence, this is a 3 x 4 table
- It's a two-way table, because we are studying the association of two variables (`tobacco` and `insurance`)
- Compare insurance percentages by tobacco group?

## Insurance rates by tobacco group {.smaller}

```{r}
#| echo: true

dm1000 |> filter(complete.cases(tobacco, insurance)) |>
  tabyl(tobacco, insurance) |> 
  adorn_percentages(denominator = "row") |>
  adorn_totals(where = "col") |> kbl(digits = 3)
```

- These are **proportions** and not percentages.
- Proportions fall between 0 and 1: multiply by 100 for percentages.

## Insurance rates by tobacco group?

```{r}
#| echo: true

tempdat2 <- dm1000 |> 
  filter(complete.cases(tobacco, insurance)) 

tab2 <- table(tempdat2$tobacco, tempdat2$insurance)

tab2

chisq.test(tab2)
```


## Grouped Numerical Summaries

### LDL by Residence

```{r}
#| echo: true
#| message: true
mosaic::favstats(ldl ~ residence, data = dm1000)
```

### LDL by Insurance

```{r}
#| echo: true
#| message: true
mosaic::favstats(ldl ~ insurance, data = dm1000)
```

## LDL by Residence

```{r}
#| echo: true
#| warning: true

ggplot(data = dm1000, aes(x = residence, y = ldl)) +
  geom_violin(aes(fill = residence)) +
  geom_boxplot(width = 0.3) +
  scale_fill_viridis_d(begin = 0.5, option = "D") +
  guides(fill = "none") 
```

## LDL by Residence, improved

```{r}
#| echo: true
#| fig-height: 4

tempdat <- dm1000 |> filter(complete.cases(residence))

ggplot(data = tempdat, aes(x = residence, y = ldl)) +
  geom_violin(aes(fill = residence)) +
  geom_boxplot(width = 0.3) +
  scale_fill_viridis_d(begin = 0.5, option = "D") +
  guides(fill = "none") 
```


## LDL by Insurance

```{r}
ggplot(data = dm1000, aes(x = insurance, y = ldl)) +
  geom_violin() +
  geom_boxplot(aes(fill = insurance), width = 0.3, notch = TRUE) +
  scale_fill_viridis_d(begin = 0.5, option = "A") +
  guides(fill = "none") 
```

## Session Information

```{r}
#| echo: true
sessioninfo::session_info()
```